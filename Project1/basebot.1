#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 64 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1           0 2625 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 177
(
 #"#reader(lib \"htdp-advanced-reader.ss\" \"lang\")((modname basebot) "
 #"(read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constru"
 #"ctor repeating-decimal #t #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 33 #";;; Project 1, 6.001, Spring 2005"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;; idea is to simulate a baseball robot"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; imagine hitting a ball with an initial velocity of v "
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; at an angle alpha from the horizontal, at a height h"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; we would like to know how far the ball travels."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; as a first step, we can just model this with simple physics"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; so the equations of motion for the ball have a vertical and a "
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; horizontal component"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; the vertical component is governed by"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; y(t) = v sin alpha t + h - 1/2 g t^2 "
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; where g is the gravitational constant of 9.8 m/s^2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; the horizontal component is governed by"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; x(t) = v cos alpha t"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; assuming it starts at the origin"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; First, we want to know when the ball hits the ground"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; this is governed by the quadratic equation, so we just need to kn"
 #"ow when "
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";; y(t)=0 (i.e. for what t_impact is y(t_impact)= 0)."
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; note that there are two solutions, only one makes sense physicall"
 #"y"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"square"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; these are constants that will be useful to us"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"gravity"
0 0 24 3 1 #" "
0 0 21 3 3 #"9.8"
0 0 24 3 3 #")  "
0 0 17 3 9 #";; in m/s"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; ;(define pi 3.14159)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"1/2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 1 #"u"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; you need to complete this procedure, then show some test cases"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(position 0 0 0 0)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(position 0 0 20 0)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; (position 0 5 10 10)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; (position 2 2 2 2)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; (position 5 5 5 5)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; define root finding procedure"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"quadratic-formula"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"0"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"root1"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"quadratic-formula"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"no soultion\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #" ("
0 0 14 3 17 #"quadratic-formula"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"root2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"quadratic-formula"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"no soultion\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #" ("
0 0 14 3 17 #"quadratic-formula"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;(root1 5 3 6)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;(root1 1 5 4)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;(root2 1 5 4)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 3"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"time-to-impact"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 17 #"vertical-velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"root1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 7 #"gravity"
0 0 24 3 2 #") "
0 0 14 3 17 #"vertical-velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 3 #") ("
0 0 14 3 5 #"root2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 7 #"gravity"
0 0 24 3 2 #") "
0 0 14 3 17 #"vertical-velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"root2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 7 #"gravity"
0 0 24 3 2 #") "
0 0 14 3 17 #"vertical-velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"root1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 14 3 7 #"gravity"
0 0 24 3 2 #") "
0 0 14 3 17 #"vertical-velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"           )))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;(time-to-impact 50 -10)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; Note that if we want to know when the ball drops to a particular "
 #"height r "
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";; (for receiver), we have"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"time-to-height"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 17 #"vertical-velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 16 #"target-elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"time-to-impact"
0 0 24 3 1 #" "
0 0 14 3 17 #"vertical-velocity"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 16 #"target-elevation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;(time-to-height 10 20 21)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";; once we can solve for t_impact, we can use it to figure out how f"
 #"ar the ball went"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; conversion procedure"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"degree2radian"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"deg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #"  "
0 0 14 3 3 #"deg"
0 0 24 3 1 #" "
0 0 14 3 2 #"pi"
0 0 24 3 2 #") "
0 0 21 3 4 #"180."
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; calculate the x velocity"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vx"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cos"
0 0 24 3 2 #" ("
0 0 14 3 13 #"degree2radian"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; calculate the y velocity"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vy"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sin"
0 0 24 3 2 #" ("
0 0 14 3 13 #"degree2radian"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;(calc-Vx 25 53)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; calculate the time it takes to get to the max point"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"calc-time-max"
0 0 24 3 1 #" "
0 0 14 3 16 #"velocity-initial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 16 #"velocity-initial"
0 0 24 3 1 #" "
0 0 14 3 7 #"gravity"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;calculate the max height"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"total-height"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vy"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 3 #") ("
0 0 14 3 13 #"calc-time-max"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vy"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 7 #"gravity"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 13 #"calc-time-max"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vy"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; calculate the total time for the ball to fall on the ground"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"total-time"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 13 #"calc-time-max"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vy"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 12 #"total-height"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angel"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 3 #")) "
0 0 14 3 7 #"gravity"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"travel-distance-simple"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vx"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 3 #") ("
0 0 14 3 10 #"total-time"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;(travel-distance-simple 60 25 53)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; total time is 6s"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; maximum height 80m"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; horizontal motion 90m"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; let's try this out for some example values.  Note that we are goi"
 #"ng to "
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; do everything in metric units, but for quaint reasons it is easie"
 #"r to think"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";; about things in English units, so we will need some conversions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"meters-to-feet"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 4 #"39.6"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"feet-to-meters"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 2 #") "
0 0 21 3 4 #"39.6"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"hours-to-seconds"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"h"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 21 3 4 #"3600"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"seconds-to-hours"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 4 #"3600"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; what is time to impact for a ball hit at a height of 1 meter"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; with a velocity of 45 m/s (which is about 100 miles/hour)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; at an angle of 0 (straight horizontal)"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;(travel-distance-simple 1 45 0) ;;i20.328927815368154 m"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;(total-time 45 0 1) ;; 0.45175395145262565 sec"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; at an angle of (/ pi 2) radians or 90 degrees (straight vertical)"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;(travel-distance-simple 1 45 90) ;; 2.536544885275964e-014 m"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;(total-time 45 90 1) ;;9.20584217798685 sec"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; at an angle of (/ pi 4) radians or 45 degrees"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 22 #"travel-distance-simple"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"45"
0 0 24 3 1 #" "
0 0 21 3 2 #"44"
0 0 24 3 2 #") "
0 0 17 3 22 #";;207.62785983753528 m"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;(total-time 45 45 1) ;;6.525114117972054 sec"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; what is the distance traveled in each case?"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; record both in meters and in feet"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 5"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; these sound pretty impressive, but we need to look at it more car"
 #"efully"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; first, though, suppose we want to find the angle that gives the b"
 #"est"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #";; distance"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; assume that angle is between 0 and (/ pi 2) radians or between 0 "
 #"and 90"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";; degrees"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"alpha-increment"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; check the angel if it's bigger than 90"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; if it's not increase and check distance"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; compare new distance with old distance"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"recur-func"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 13 #"prev-distance"
0 0 24 3 1 #" "
0 0 14 3 10 #"best-angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 10 #"best-angle"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 22 #"travel-distance-simple"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 2 #") "
0 0 14 3 13 #"prev-distance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"recur-func"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 15 #"alpha-increment"
0 0 24 3 2 #") "
0 0 14 3 13 #"prev-distance"
0 0 24 3 1 #" "
0 0 14 3 10 #"best-angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"recur-func"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 15 #"alpha-increment"
0 0 24 3 3 #") ("
0 0 14 3 22 #"travel-distance-simple"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 2 #") "
0 0 14 3 5 #"angle"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"find-best-angle"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"recur-func"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;(find-best-angle 25 1) ;;207.53716710226922"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; find best angle"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;apparently the best angel is 45"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; try for other velocities"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; for bigger velocities the angel doesn't change much"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; try for other heights"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; as the height grows the angel grows smaller"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 6"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; problem is that we are not accounting for drag on the ball (or on"
 #" spin "
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #";; or other effects, but let's just stick with drag)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; Newton's equations basically say that ma = F, and here F is reall"
 #"y two "
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; forces.  One is the effect of gravity, which is captured by mg.  "
 #"The"
) 0 0 24 29 1 #"\n"
0 0 17 3 43 #";; second is due to drag, so we really have"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; a = drag/m + gravity"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; drag is captured by 1/2 C rho A vel^2, where"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; C is the drag coefficient (which is about 0.5 for baseball sized "
 #"spheres)"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; rho is the density of air (which is about 1.25 kg/m^3 at sea leve"
 #"l "
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #";; with moderate humidity, but is about 1.06 in Denver)"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; A is the surface area of the cross section of object, which is pi"
 #" D^2/4 "
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; where D is the diameter of the ball (which is about 0.074m for a "
 #"baseball)"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; thus drag varies by the square of the velocity, with a scaling fa"
 #"ctor "
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";; that can be computed"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; We would like to again compute distance , but taking into account"
 #" "
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";; drag."
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; Basically we can rework the equations to get four coupled linear "
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; differential equations"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; let u be the x component of velocity, and v be the y component of"
 #" velocity"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; let x and y denote the two components of position (we are ignorin"
 #"g the "
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; third dimension and are assuming no spin so that a ball travels i"
 #"n a plane)"
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #";; the equations are"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; dx/dt = u"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; dy/dt = v"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; du/dt = -(drag_x/m + g_x)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; dv/dt = -(drag_y/m + g_y)"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; we have g_x = - and g_y = - gravity"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; to get the components of the drag force, we need some trig."
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; let speeed = (u^2+v^2)^(1/2), then"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; drag_x = - drag * u /speed"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; drag_y = - drag * v /speed"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; where drag = beta speed^2"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; and beta = 1/2 C rho pi D^2/4"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; note that we are taking direction into account here"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; we need the mass of a baseball -- which is about .15 kg."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; so now we just need to write a procedure that performs a simple i"
 #"ntegration"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; of these equations -- there are more sophisticated methods but a "
 #"simple one "
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; is just to step along by some step size in t and add up the value"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; dx = u dt"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; dy = v dt"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; du = - 1/m speed beta u dt"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; dv = - (1/m speed beta v + g) dt"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; initial conditions"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; u_0 = V cos alpha"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; v_0 = V sin alpha"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; y_0 = h"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; x_0 = 0"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; we want to start with these initial conditions, then take a step "
 #"of size dt"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; (which could be say 0.1) and compute new values for each of these"
 #" parameters"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; when y reaches the desired point (<= 0) we stop, and return the d"
 #"istance (x)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"drag-coeff"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"density"
0 0 24 3 1 #" "
0 0 21 3 4 #"1.25"
0 0 24 3 3 #")  "
0 0 17 3 8 #"; kg/m^3"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"mass"
0 0 24 3 1 #" "
0 0 21 3 4 #".145"
0 0 24 3 3 #")  "
0 0 17 3 4 #"; kg"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"diameter"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.074"
0 0 24 3 3 #")  "
0 0 17 3 3 #"; m"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #" "
0 0 14 3 10 #"drag-coeff"
0 0 24 3 1 #" "
0 0 14 3 7 #"density"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 7 #"3.14159"
0 0 24 3 1 #" "
0 0 21 3 3 #".25"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 8 #"diameter"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrate"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"dx"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"dy"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"du"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"dv"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 6 #"))))) "
0 0 14 3 1 #"g"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 2 #"x0"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"integrate"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dx"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"du"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dv"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #") "
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"          ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"travel-distance"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"v0"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vy"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"u0"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vx"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 7 #"gravity"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"integrate"
0 0 24 3 1 #" "
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 4 #"mass"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"travel-distance"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 2 #") "
0 0 17 3 22 #";; 92.50801605244197 m"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;(travel-distance 1 40 45) ;; 82.78053770266135 m"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; RUN SOME TEST CASES"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; what about Denver?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 7"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; now let's turn this around.  Suppose we want to throw the ball.  "
 #"The same"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; equations basically hold, except now we would like to know what a"
 #"ngle to "
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; use, given a velocity, in order to reach a given height (receiver"
 #") at a "
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";; given distance"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; a cather trying to throw someone out at second has to get it roug"
 #"hly 36 m"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; (or 120 ft) how quickly does the ball get there, if he throws at "
 #"55m/s,"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";;  at 45m/s, at 35m/s?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; try out some times for distances (30, 60, 90 m) or (100, 200, 300"
 #" ft) "
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";; using 45m/s"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"find-time"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"starting-angle"
0 0 24 3 1 #" "
0 0 21 3 3 #"-90"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"best-angle"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"old-time"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"recur-distance"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 14 #"starting-angle"
0 0 24 3 1 #" "
0 0 14 3 10 #"best-angle"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-time"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"recur-distance"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 14 #"starting-angle"
0 0 24 3 1 #" "
0 0 14 3 10 #"best-angle"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-time"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 14 3 14 #"starting-angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 8 #"old-time"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"almost-equal"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 2 #" ("
0 0 14 3 15 #"travel-distance"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 14 #"starting-angle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 11 #"travel-time"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 14 #"starting-angle"
0 0 24 3 2 #") "
0 0 14 3 8 #"old-time"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 14 #"recur-distance"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 14 #"starting-angle"
0 0 24 3 2 #") "
0 0 14 3 14 #"starting-angle"
0 0 24 3 2 #" ("
0 0 14 3 11 #"travel-time"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 14 #"starting-angle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 14 #"recur-distance"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 14 #"starting-angle"
0 0 24 3 2 #") "
0 0 14 3 10 #"best-angle"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-time"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 14 #"recur-distance"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 14 #"starting-angle"
0 0 24 3 2 #") "
0 0 14 3 10 #"best-angle"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-time"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"almost-equal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 15 #"target-distance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 15 #"target-distance"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"integrate-time"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"dx"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"dy"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"du"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"dv"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 6 #"))))) "
0 0 14 3 1 #"g"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 2 #"t0"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 14 #"integrate-time"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dx"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"du"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dv"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #") "
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"          ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"travel-time"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"v0"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vy"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"u0"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vx"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 7 #"gravity"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 14 #"integrate-time"
0 0 24 3 1 #" "
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 4 #"mass"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;(find-time 35 90 1) ;; the weakoutfielder can't reach 90 meters"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;(find-time 45 60 1) ;; a strong outfilder can reach 60 meters in 1"
 #".84 seconds"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;(find-time 45 90 1) ;; It will take 5.35 seconds to reach 90 meter"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 8"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"travel-distance-bounce"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 7 #"bounces"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 23 #"distance-without-bounce"
0 0 24 3 2 #" ("
0 0 14 3 15 #"travel-distance"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"calc-bounce"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 7 #"bounces"
0 0 24 3 1 #" "
0 0 14 3 23 #"distance-without-bounce"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"calc-bounce"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 7 #"bounces"
0 0 24 3 1 #" "
0 0 14 3 12 #"old-distance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 15 #"bounce-distance"
0 0 24 3 2 #" ("
0 0 14 3 15 #"travel-distance"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 7 #"bounces"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 11 #"calc-bounce"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"bounces"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"old-distance"
0 0 24 3 1 #" "
0 0 14 3 15 #"bounce-distance"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 12 #"old-distance"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 22 #"travel-distance-bounce"
0 0 17 3 1 #" "
0 0 17 3 38 #"55 80 1 4) ;; 61.733650076285336 meter"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 22 #"travel-distance-bounce"
0 0 17 3 1 #" "
0 0 17 3 38 #"45 45 1 1) ;; 130.61071759996312 meter"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 22 #"travel-distance-bounce"
0 0 17 3 1 #" "
0 0 17 3 38 #"45 45 1 2) ;; 142.54687837034763 meter"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 22 #"travel-distance-bounce"
0 0 17 3 1 #" "
0 0 17 3 37 #"45 45 1 3) ;; 145.7535162820798 meter"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"integrate-bounce"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"dx"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"dy"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"du"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"dv"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 6 #"))))) "
0 0 14 3 1 #"g"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 16 #"integrate-bounce"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dx"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"du"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dv"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #") "
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"          ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"travel-distance-bounce2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"v0"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vy"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"u0"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calc-Vx"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 7 #"gravity"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 16 #"integrate-bounce"
0 0 24 3 1 #" "
0 0 14 3 2 #"x0"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"t0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 4 #"mass"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"calc-bounce2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 7 #"bounces"
0 0 24 3 1 #" "
0 0 14 3 12 #"old-distance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"info-list"
0 0 24 3 2 #" ("
0 0 14 3 23 #"travel-distance-bounce2"
0 0 24 3 1 #" "
0 0 14 3 9 #"elevation"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 15 #"bounce-distance"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"info-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"u0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"info-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"v0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"info-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"new-velocity"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"u0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 7 #"bounces"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"calc-bounce2"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-veloctiy"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"bounces"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"old-distance"
0 0 24 3 1 #" "
0 0 14 3 15 #"bounce-distance"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 12 #"old-distance"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"calc-bounce2"
0 0 24 3 1 #" "
0 0 21 3 2 #"45"
0 0 24 3 1 #" "
0 0 21 3 2 #"45"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 2 #"`1"
0 0 17 3 1 #" "
0 0 17 3 2 #"`2"
0 0 17 3 1 #" "
0 0 17 3 2 #"`3"
0 0 17 3 1 #" "
0 0 17 3 4 #"`4))"
0 0 24 29 1 #"\n"
0           0
