;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname prisoner) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))
;; 
;;  The play-loop procedure takes as its  arguments two prisoner's
;;  dilemma strategies, and plays an iterated game of approximately
;;  one hundred rounds.  A strategy is a procedure that takes
;;  two arguments: a history of the player's previous plays and 
;;  a history of the other player's previous plays.  The procedure
;;  returns either a "c" for cooperate or a "d" for defect.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (play-loop-iter strat0 strat1 count history0 history1 limit)
  (cond ((= count limit) (print-out-results history0 history1 limit))
        (else (let ((result0 (strat0 history0 history1))
                    (result1 (strat1 history1 history0)))
                (play-loop-iter strat0 strat1 (+ count 1)
                                (extend-history result0 history0)
                                (extend-history result1 history1)
                                limit)))))
(define (play-loop strat0 strat1)
  (play-loop-iter strat0 strat1 0 the-empty-history the-empty-history
		  (+ 90 (random 21))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  The following procedures are used to compute and print
;;  out the players' scores at the end of an iterated game
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (print-out-results history0 history1 number-of-games)
  (let ((scores (get-scores history0 history1)))
    (begin (newline)
    (display "Player 1 Score:  ")
    (display (* 1.0 (/ (car scores) number-of-games)))
    (newline)
    (display "Player 2 Score:  ")
    (display (* 1.0 (/ (car (cdr scores)) number-of-games)))
    (newline))))

(define (get-scores history0 history1)
  (get-scores-helper history0 history1 0 0))
(define (get-scores-helper history0 history1 score0 score1)
  (cond ((empty-history? history0)
         (list score0 score1))
        (else (let ((game (make-play (most-recent-play history0)
                                     (most-recent-play history1))))
                (get-scores-helper (rest-of-plays history0)
                                   (rest-of-plays history1)
                                   (+ (get-player-points 0 game) score0)
                                   (+ (get-player-points 1 game) score1))))))

(define (get-player-points num game)
  (list-ref (get-point-list game) num))

(define *game-association-list*
  ;; format is that first sublist identifies the players' choices 
  ;; with "c" for cooperate and "d" for defect; and that second sublist 
  ;; specifies payout for each player
  '((("c" "c") (3 3))
    (("c" "d") (0 5))
    (("d" "c") (5 0))
    (("d" "d") (1 1))))

(define (get-point-list game)
    (cadr (extract-entry game *game-association-list*)))

;; note that you will need to write extract-entry

(define make-play list)

(define the-empty-history '())

(define extend-history cons)
(define empty-history? null?)

(define most-recent-play car)

(define rest-of-plays cdr)

;; A sampler of strategies

(define (NASTY my-history other-history)
  "d")

(define (PATSY my-history other-history)
  "c")

(define (SPASTIC my-history other-history)
  (if (= (random 2) 0)
      "c"
      "d"))
(define (count-instances-of test hist)
    (cond ((empty-history? hist) 0)
	  ((string=? (most-recent-play hist) test)
	   (+ (count-instances-of test (rest-of-plays hist)) 1))
	  (else (count-instances-of test (rest-of-plays hist)))))

(define (EGALITARIAN  my-history other-history)
  (let ((ds (count-instances-of "d" other-history))
	(cs (count-instances-of "c" other-history)))
    (if (> ds cs) "d" "c")))

(define (EYE-FOR-EYE my-history other-history)
  (if (empty-history? my-history)
      "c"
      (most-recent-play other-history)))

(define a-play (make-play "c" "d"))

;; Problem 1
(define two-lists-equal
  (lambda (list1 list2)
    (if (and (string=? (car list1) (car list2)) (string=? (car (cdr list1)) (car (cdr list2))))
        #t
        #f)))

(define extract-entry
  (lambda (pair pairs-list)
   (if (empty? pairs-list) empty
    (if (two-lists-equal pair (car (car pairs-list)))
           (list (car (car pairs-list)) (car (cdr (car pairs-list))))
        (extract-entry pair (cdr pairs-list))))))

(extract-entry a-play *game-association-list*)

;;Problem 2

;;(play-loop NASTY PATSY) ;;Nasty always win against pats Player 1 Score:  5 ;;Player 2 Score:  0
;;(play-loop PATSY PATSY) ;; both Patsys do good Player 1 Score:  3 ;;Player 2 Score:  3
;;(play-loop EGALITARIAN PATSY) ;; Patsy does quite well against egalitarian Player 1 Score:  3 ;;Player 2 Score:  3
;;(play-loop EGALITARIAN EGALITARIAN) ;; they do well against each other Player 1 Score:  3 ;;Player 2 Score:  3
;;(play-loop EGALITARIAN SPASTIC) ;; spastic do much better Player 1 Score:  5/2 ;;Player 2 Score:  85/48
;;(play-loop NASTY SPASTIC) ;; Nasty is winning against spastic ;; Player 1 Score:  11/4 ;;Player 2 Score:  9/16
;;(play-loop PATSY SPASTIC) ;; Patsy doesn't do well against him Player 1 Score:  4/3 ;;Player 2 Score:  37/9
;;(play-loop EYE-FOR-EYE SPASTIC) ;; equal results Player 1 Score:  224/93 ;;Player 2 Score:  224/93
;;(play-loop EYE-FOR-EYE EYE-FOR-EYE) ;; equal scores Player 1 Score:  3 ;;Player 2 Score:  3



;;Problem 3
;; The new version is certainly much faster.
;; in the old version we are redoing the calculations everytime while we could have just added the results of the last game
;; and saved ourself the trouble of wasting the time on a calculations we have already done

;;Problem 4
(define (list-length lst)
  (cond ((null? lst) 0)
        (else (+ 1 (list-length (cdr lst))))))

(define (second-most-recent-play history)
  (car (cdr history)))

(define (EYE-FOR-TWO-EYES my-history other-history)
  (if (empty-history? my-history)
      "c"
      (if (> (list-length other-history) 2)
          (if (and (string=? (most-recent-play other-history) "d") (string=? (second-most-recent-play other-history) "d"))
              "d"
              "c")
           "c")))

;;(play-loop EYE-FOR-TWO-EYES EYE-FOR-EYE) ;; They both end up playing fair because eye for eye will copy the other player move and eye for two eyes will
;; never have two defection to start defecting. Player 1 Score:  3 ;;Player 2 Score:  3
;;(play-loop EYE-FOR-TWO-EYES EGALITARIAN) same results as the previous game
;;(play-loop EYE-FOR-TWO-EYES NASTY) ;; nasty win because the other player will cooperate twice before defecting for the rest of the game

;;Problem 5
(define (find-history-item history-list item)
  (if (= item 1)
      (car history-list)
      (find-history-item (cdr history-list) (- item 1))))

(define (compare-list-items history-list n)
  (if (>= 1 n)
      #t
      (if (and (string=? (find-history-item history-list (- n 1)) "c") (string=? (find-history-item history-list  n) "c"))
              (compare-list-items history-list (- n 1))
              #f)))
      
 
(define (EYE-FOR-n-EYES my-history other-history)
  (let ((n 5))
  (if (empty-history? my-history)
      "c"
      (if (>= (list-length other-history) n)
          (if (compare-list-items other-history n)
              "c"
              "d")
           "c"))))

;;(play-loop EYE-FOR-n-EYES NASTY) ;; It's take him a long time to realize whats wrong Player 1 Score:  18/19 ;;Player 2 Score:  23/19
;;(play-loop EYE-FOR-n-EYES EGALITARIAN) ;;shockingly it's a draw :) Player 1 Score:  3 ;;Player 2 Score:  3
;;(play-loop EYE-FOR-n-EYES SPASTIC) ;;apparently he likes randomness Player 1 Score:  293/101 ;;Player 2 Score:  78/101

;;Problem 6
(define rotating-state 0)

(define (make-rotating-strategy strat0 strat1 freq0 freq1)
  (if (> freq0 rotating-state)
      (begin0 strat0
        (set! rotating-state (+ rotating-state 1))
             (display rotating-state)
             )
      (if (and (> (+ freq0 freq1) rotating-state) (< freq0 rotating-state))
          (begin0 strat1
            (set! rotating-state (+ rotating-state 1))
             (display rotating-state)
             )
          (begin0 strat0
            (set! rotating-state 0)
                 (display rotating-state)
                 ))))

(define x `("c" "c"))

(play-loop (make-rotating-strategy EYE-FOR-TWO-EYES EYE-FOR-TWO-EYES 10 24) PATSY)


;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; code to use in 3 player game
;;	    

;(define *game-association-list*
;  (list (list (list "c" "c" "c") (list 4 4 4))
;        (list (list "c" "c" "d") (list 2 2 5))
;        (list (list "c" "d" "c") (list 2 5 2))
;        (list (list "d" "c" "c") (list 5 2 2))
;        (list (list "c" "d" "d") (list 0 3 3))
;        (list (list "d" "c" "d") (list 3 0 3))
;        (list (list "d" "d" "c") (list 3 3 0))
;        (list (list "d" "d" "d") (list 1 1 1))))


;; in expected-values: #f = don't care 
;;                      X = actual-value needs to be #f or X 
;(define (test-entry expected-values actual-values) 
;   (cond ((null? expected-values) (null? actual-values)) 
;         ((null? actual-values) #f) 
;         ((or (not (car expected-values)) 
;              (not (car actual-values)) 
;              (= (car expected-values) (car actual-values))) 
;          (test-entry (cdr expected-values) (cdr actual-values))) 
;         (else #f))) 
;
;(define (is-he-a-fool? hist0 hist1 hist2) 
;   (test-entry (list 1 1 1) 
;               (get-probability-of-c 
;                (make-history-summary hist0 hist1 hist2))))
;
;(define (could-he-be-a-fool? hist0 hist1 hist2)
;  (test-entry (list 1 1 1)
;              (map (lambda (elt) 
;                      (cond ((null? elt) 1)
;                            ((= elt 1) 1)  
;                            (else 0)))
;                   (get-probability-of-c (make-history-summary hist0 
;                                                               hist1
;                                                               hist2)))))
